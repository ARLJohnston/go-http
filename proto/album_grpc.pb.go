// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.2
// source: album.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Albums_Create_FullMethodName = "/album.Albums/Create"
	Albums_Read_FullMethodName   = "/album.Albums/Read"
	Albums_Update_FullMethodName = "/album.Albums/Update"
	Albums_Delete_FullMethodName = "/album.Albums/Delete"
)

// AlbumsClient is the client API for Albums service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AlbumsClient interface {
	Create(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Identifier, error)
	Read(ctx context.Context, in *Nil, opts ...grpc.CallOption) (Albums_ReadClient, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Nil, error)
	Delete(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Nil, error)
}

type albumsClient struct {
	cc grpc.ClientConnInterface
}

func NewAlbumsClient(cc grpc.ClientConnInterface) AlbumsClient {
	return &albumsClient{cc}
}

func (c *albumsClient) Create(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Identifier, error) {
	out := new(Identifier)
	err := c.cc.Invoke(ctx, Albums_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumsClient) Read(ctx context.Context, in *Nil, opts ...grpc.CallOption) (Albums_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Albums_ServiceDesc.Streams[0], Albums_Read_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &albumsReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Albums_ReadClient interface {
	Recv() (*Album, error)
	grpc.ClientStream
}

type albumsReadClient struct {
	grpc.ClientStream
}

func (x *albumsReadClient) Recv() (*Album, error) {
	m := new(Album)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *albumsClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, Albums_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *albumsClient) Delete(ctx context.Context, in *Album, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, Albums_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AlbumsServer is the server API for Albums service.
// All implementations must embed UnimplementedAlbumsServer
// for forward compatibility
type AlbumsServer interface {
	Create(context.Context, *Album) (*Identifier, error)
	Read(*Nil, Albums_ReadServer) error
	Update(context.Context, *UpdateRequest) (*Nil, error)
	Delete(context.Context, *Album) (*Nil, error)
	mustEmbedUnimplementedAlbumsServer()
}

// UnimplementedAlbumsServer must be embedded to have forward compatible implementations.
type UnimplementedAlbumsServer struct {
}

func (UnimplementedAlbumsServer) Create(context.Context, *Album) (*Identifier, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedAlbumsServer) Read(*Nil, Albums_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedAlbumsServer) Update(context.Context, *UpdateRequest) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedAlbumsServer) Delete(context.Context, *Album) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedAlbumsServer) mustEmbedUnimplementedAlbumsServer() {}

// UnsafeAlbumsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AlbumsServer will
// result in compilation errors.
type UnsafeAlbumsServer interface {
	mustEmbedUnimplementedAlbumsServer()
}

func RegisterAlbumsServer(s grpc.ServiceRegistrar, srv AlbumsServer) {
	s.RegisterService(&Albums_ServiceDesc, srv)
}

func _Albums_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumsServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Albums_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumsServer).Create(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

func _Albums_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Nil)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlbumsServer).Read(m, &albumsReadServer{stream})
}

type Albums_ReadServer interface {
	Send(*Album) error
	grpc.ServerStream
}

type albumsReadServer struct {
	grpc.ServerStream
}

func (x *albumsReadServer) Send(m *Album) error {
	return x.ServerStream.SendMsg(m)
}

func _Albums_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumsServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Albums_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumsServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Albums_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Album)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlbumsServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Albums_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlbumsServer).Delete(ctx, req.(*Album))
	}
	return interceptor(ctx, in, info, handler)
}

// Albums_ServiceDesc is the grpc.ServiceDesc for Albums service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Albums_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "album.Albums",
	HandlerType: (*AlbumsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Albums_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Albums_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Albums_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Read",
			Handler:       _Albums_Read_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "album.proto",
}
